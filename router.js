// Generated by CoffeeScript 1.6.3
(function() {
  var Matcher, Router, dataHandler, qry;

  qry = require('qry');

  Matcher = (function() {
    function Matcher(id, match) {
      this.id = id;
      this.hdls = [];
      this.match = qry(match);
    }

    Matcher.prototype.isMatch = function(req) {
      return this.match(req);
    };

    Matcher.prototype.addHandler = function(handler) {
      return this.hdls.unshift(handler);
    };

    return Matcher;

  })();

  dataHandler = function(req, hdl) {
    return function(res) {
      return hdl(req, res);
    };
  };

  Router = (function() {
    function Router() {
      this.queue = [];
      this.idx = {};
    }

    Router.prototype.addMatcher = function(id, match) {
      var matcher;
      if (match != null) {
        matcher = new Matcher(id, match);
      } else {
        matcher = id;
      }
      this.queue.unshift(matcher);
      return this.idx[matcher.id] = matcher;
    };

    Router.prototype.getHandler = function(req) {
      var hdl, m, _i, _len, _ref;
      _ref = this.queue;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        if (m.isMatch(req)) {
          hdl = m.hdls.shift();
          m.hdls.push(hdl);
          return dataHandler(req, hdl);
        }
      }
    };

    Router.prototype.getMatcher = function(id) {
      return this.idx[id];
    };

    Router.prototype.removeMatcher = function(id) {
      var m, tmp, _i, _len, _ref;
      tmp = [];
      _ref = this.queue;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        m = _ref[_i];
        if (m.id !== id) {
          tmp.push(m);
        }
      }
      this.queue = tmp;
      return delete this.idx[id];
    };

    Router.prototype.removeHandler = function(id, handler) {
      var h, hdls, m, tmp, _i, _len;
      tmp = [];
      hdls = (m = this.getMatcher(id)).hdls;
      for (_i = 0, _len = hdls.length; _i < _len; _i++) {
        h = hdls[_i];
        if (handler !== h) {
          tmp.push(h);
        }
      }
      if (tmp.length > 0) {
        return m.hdls = tmp;
      } else {
        return this.removeMatcher(id);
      }
    };

    return Router;

  })();

  module.exports = {
    Matcher: Matcher,
    Router: Router
  };

}).call(this);
